---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sample-app-unit-test
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: unit-test
      image: "eclipse-temurin:21"
      env:
        - name: GRADLE_USER_HOME
          value: "/home/gradle"
        - name: TZ
          value: "Asia/Tokyo"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/usr/bin/env bash
        ./gradlew jacocoTestReport --info
        gradle_exit_code=$?
        cp -R build/reports/tests/test/* ../../apps-for-test/test-reports/public/sample-app/unit-test/
        if [ $gradle_exit_code -ne 0 ]; then
          echo "jacocoTestReport failed"
          exit 1
        fi
      resources:
        limits:
          memory: "2Gi"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sample-app-sonar
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: sonar
      image: "eclipse-temurin:21"
      env:
        - name: GRADLE_USER_HOME
          value: "/home/gradle"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/usr/bin/env bash
        ./gradlew sonar --info

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tag-image-version
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: IMAGE_REGISTRY
      type: string
    - name: NAMESPACE
      type: string
    - name: APP_NAME
      type: string
    - name: GIT_REVISION
      type: string
    - name: PROJECT_DIR
      description: The directory containing VERSION
      type: string
      default: "."
  steps:
    - name: tag-image-version
      image: "registry.redhat.io/rhel8/buildah@sha256:aac6629389db17e99894c5bee0da01d4c8065d11d8c6f6e1602f9484290baa70"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/sh
        VERSION=$(cat VERSION)
        if buildah from $(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$VERSION > /dev/null 2>&1; then
          echo "タグ $VERSION が存在します。Skip..."
        else
          echo "タグ $VERSION は存在しません。"
          echo "$(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$(params.GIT_REVISION)をpullする"
          buildah pull $(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$(params.GIT_REVISION)
          echo "$(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$VERSION タグをつける"
          buildah tag $(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$(params.GIT_REVISION) $(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$VERSION
          echo "$(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$VERSION をpushする"
          buildah push $(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$VERSION
        fi
      securityContext:
        capabilities:
          add:
            - SETFCAP

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-image-tag-in-repo
spec:
  params:
    - name: IMAGE_REGISTRY
      type: string
    - name: NAMESPACE
      type: string
    - name: POD_NAMESPACE
      type: string
    - name: APP_NAME
      type: string
    - name: GIT_REVISION
      type: string
    - name: APP_GIT_REPO_URL
      type: string
    - name: MANIFEST_DIR
      type: string
    - name: ENVIRONMENT
      type: string
  steps:
    - name: update-git-commit-push
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      script: |
        #!/bin/sh
        yum install -y git

        USERNAME=$(oc get secret git-credentials -n rhn-support-jiadchen-dev -o jsonpath='{.data.username}' | base64 --decode)
        echo username is $USERNAME
        TOKEN=$(oc get secret git-credentials -n rhn-support-jiadchen-dev -o jsonpath='{.data.token}' | base64 --decode)
        echo token is $TOKEN

        git config --global user.email "sample-app-pipeline@openshift.com"
        git config --global user.name "sample-app-pipeline"

        GITOPS_REPO_URL=$(echo $(params.APP_GIT_REPO_URL) | sed "s|https://|https://$USERNAME:$TOKEN@|; s|red-hat-developer-sandbox-apps|red-hat-developer-sandbox-manifest|")
        echo gitops repo url is $GITOPS_REPO_URL

        echo "Cloning GitOps repository..."
        git clone $GITOPS_REPO_URL gitops-repo
        cd gitops-repo/$(params.MANIFEST_DIR)/$(params.ENVIRONMENT)
        git remote set-url origin $GITOPS_REPO_URL

        echo "Updating patch's deployment.yaml..."
        sed -i 's|$(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):[^|]*|$(params.IMAGE_REGISTRY)/$(params.NAMESPACE)/$(params.APP_NAME):$(params.GIT_REVISION)|g' patch/$(params.APP_NAME)/deployment.yaml
        git add patch/$(params.APP_NAME)/deployment.yaml
        git commit -m "Update $(params.APP_NAME) image tag to $(params.GIT_REVISION)"

        MAX_RETRIES=3
        RETRY_COUNT=0
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempting to push to remote..."
          git push origin main
          if [ $? -eq 0 ]; then
            echo "Push successful."
            exit 0
          else
            echo "Push failed. Attempting rebase..."
            git pull origin main --rebase
            if [ $? -ne 0 ]; then
              echo "Rebase failed. Exiting..."
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Retrying push... (Attempt: $RETRY_COUNT)"
          fi
        done

        echo "Push failed after $MAX_RETRIES attempts."
        exit 1
    - name: check-deployment-status
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      script: |
        #!/bin/sh
        set -e

        # 確認したいPodの名前とNamespaceを設定
        APP_NAME=$(params.APP_NAME)
        NAMESPACE=$(params.NAMESPACE)
        IMAGE_TAG=$(params.GIT_REVISION)
        POD_NAMESPACE=$(params.POD_NAMESPACE)
        IMAGE=$(params.IMAGE_REGISTRY)/$NAMESPACE/$APP_NAME:$IMAGE_TAG
        ENVIRONMENT=$(params.ENVIRONMENT)
        echo "Checking deployment status for $APP_NAME in $POD_NAMESPACE"
        echo "$IMAGE should be deployed"

        # タイムアウト時間を秒単位で設定（10分 = 600秒）
        TIMEOUT=600
        INTERVAL=30
        ELAPSED=0

        # デプロイメントの更新が完了するまで待機
        while true; do
          POD_STATUS=$(oc get pods -n $POD_NAMESPACE -l app=$ENVIRONMENT-$APP_NAME -o jsonpath="{.items[*].status.containerStatuses[*].image}")
          echo "Current pod status: $POD_STATUS"

          if echo "$POD_STATUS" | grep -q "$IMAGE"; then
            echo "Deployment updated successfully with image tag: $IMAGE_TAG"
            break
          fi

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Deployment update timed out after $TIMEOUT seconds"
            exit 1
          fi

          echo "Waiting for deployment to update with image tag: $IMAGE_TAG"
          sleep $INTERVAL
          ELAPSED=$(($ELAPSED + $INTERVAL))
        done

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: integration-test
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: integration-test
      image: "eclipse-temurin:21"
      env:
        - name: GRADLE_USER_HOME
          value: "/home/gradle"
        - name: TZ
          value: "Asia/Tokyo"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/usr/bin/env bash
        SPRING_PROFILES_ACTIVE=it ./gradlew test --info
        gradle_exit_code=$?
        cp -R build/reports/tests/test/* ../../apps-for-test/test-reports/public/sample-app/integration-test/
        if [ $gradle_exit_code -ne 0 ]; then
          echo "test failed"
          exit 1
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sample-view-unit-test
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: unit-test
      image: "node:18-alpine"
      env:
        - name: TZ
          value: "Asia/Tokyo"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/sh
        npm ci
        npm run test
        test_exit_code=$?
        cp -R test-results/* ../../apps-for-test/test-reports/public/sample-view/unit-test/
        if [ $test_exit_code -ne 0 ]; then
          echo "test failed"
          exit 1
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sample-view-sonar
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: sampe-view-sonar
      image: "node:18-alpine"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/sh
        apk add --no-cache openjdk17
        npm run sonar

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sample-view-storybook-interaction-test
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: interaction-test
      image: "mcr.microsoft.com/playwright:v1.45.1-jammy"
      env:
        - name: TZ
          value: "Asia/Tokyo"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/sh
        git config --global user.email "sample-app-pipeline@openshift.com"
        git config --global user.name "sample-app-pipeline"
        git config --global --add safe.directory /workspace/source
        ./test-storybook.sh
        test_exit_code=$?
        npm run build-storybook
        cp -R storybook-static/* ../../apps-for-test/test-reports/public/sample-view/storybook/
        if [ $test_exit_code -ne 0 ]; then
          echo "test failed"
          exit 1
        fi
      resources:
        limits:
          memory: "2Gi"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: e2e-test
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
  steps:
    - name: e2e-test
      image: "mcr.microsoft.com/playwright:v1.45.1-jammy"
      env:
        - name: TZ
          value: "Asia/Tokyo"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/sh
        npm ci
        npm run test-ci
        test_exit_code=$?
        cp -R playwright-report/* ../apps-for-test/test-reports/public/e2e/
        if [ $test_exit_code -ne 0 ]; then
          echo "test failed"
          exit 1
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  description: |-
    Buildah task builds source into a container image and then pushes it to a container registry.
    Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: "registry.redhat.io/rhel8/buildah@sha256:b48f410efa0ff8ab0db6ead420a5d8d866d64af846fece5efb185230d7ecf591"
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: "true"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: "The format of the built container, oci or docker"
      name: FORMAT
      type: string
    - default: ""
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ""
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
    - default: "false"
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
    - description: Image repository where the built image would be pushed to
      name: IMAGE_URL
      type: string
  steps:
    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources:
        limits:
          memory: "2Gi"
      script: |
        ENTITLEMENT_VOLUME=""

        if [[ "$(workspaces.rhel-entitlement.bound)" == "true" ]]; then
          ENTITLEMENT_VOLUME="--volume /tmp/entitlement:/etc/pki/entitlement"
        fi

        buildah bud --storage-driver=$(params.STORAGE_DRIVER) \
          $ENTITLEMENT_VOLUME $(params.BUILD_EXTRA_ARGS) \
          --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

          # if config.json exists at workspace root, we use that
          if test -f "$(workspaces.dockerconfig.path)/config.json"; then
            export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

          # else we look for .dockerconfigjson at the root
          elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
            cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
            export DOCKER_CONFIG="$HOME/.docker"

          # need to error out if neither files are present
          else
            echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
            exit 1
          fi
        fi

        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile /tmp/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
        cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
        echo "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
    - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      name: dockerconfig
      optional: true
    - description: An optional workspace that allows providing the entitlement keys for Buildah to access subscription. The mounted workspace contains entitlement.pem and entitlement-key.pem.
      mountPath: /tmp/entitlement
      name: rhel-entitlement
      optional: true
